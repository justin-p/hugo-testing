<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>password-cracking on My notes and snippets</title><link>https://notes.justin-p.me/tags/password-cracking/</link><description>Recent content in password-cracking on My notes and snippets</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Sep 2021 20:17:35 +0200</lastBuildDate><atom:link href="https://notes.justin-p.me/tags/password-cracking/index.xml" rel="self" type="application/rss+xml"/><item><title>hcxtools</title><link>https://notes.justin-p.me/cheatsheets/tools/hcxtools/</link><pubDate>Thu, 02 Sep 2021 20:17:35 +0200</pubDate><guid>https://notes.justin-p.me/cheatsheets/tools/hcxtools/</guid><description>hcxtools Installation git clone https://github.com/ZerBea/hcxtools cd hcxtools sudo apt install libpcap-dev libcurl4-openssl-dev libssl-dev make sudo make install Usage ./hcxpcapngtool [OPTIONS] Flags short options: -o &amp;lt;file&amp;gt; : output WPA-PBKDF2-PMKID+EAPOL hash file (hashcat -m 22000) get full advantage of reuse of PBKDF2 on PMKID and EAPOL -E &amp;lt;file&amp;gt; : output wordlist (autohex enabled on non ASCII characters) to use as input wordlist for cracker retrieved from every frame that contain an ESSID -R &amp;lt;file&amp;gt; : output wordlist (autohex enabled on non ASCII characters) to use as input wordlist for cracker retrieved from PROBEREQUEST frames only -I &amp;lt;file&amp;gt; : output unsorted identity list to use as input wordlist for cracker -U &amp;lt;file&amp;gt; : output unsorted username list to use as input wordlist for cracker -D &amp;lt;file&amp;gt; : output device information list format MAC MANUFACTURER MODELNAME SERIALNUMBER DEVICENAME -h : show this help -v : show version long options: --all : convert all possible hashes instead of only the best one that can lead to much overhead hashes use hcxhashtool to filter hashes need hashcat --nonce-error-corrections &amp;gt;= 8 --eapoltimeout=&amp;lt;digit&amp;gt; : set EAPOL TIMEOUT (milliseconds) : default: 5000 ms --nonce-error-corrections=&amp;lt;digit&amp;gt; : set nonce error correction warning: values &amp;gt; 0 can lead to uncrackable handshakes : default: 0 --ignore-ie : do not use CIPHER and AKM information this will convert all frames regadless of CIPHER and/OR AKM information, and can lead to uncrackable hashes --max-essids=&amp;lt;digit&amp;gt; : maximum allowed ESSIDs default: 1 ESSID disregard ESSID changes and take ESSID with highest ranking --eapmd5=&amp;lt;file&amp;gt; : output EAP MD5 CHALLENGE (hashcat -m 4800) --eapmd5-john=&amp;lt;file&amp;gt; : output EAP MD5 CHALLENGE (john chap) --eapleap=&amp;lt;file&amp;gt; : output EAP LEAP and MSCHAPV2 CHALLENGE (hashcat -m 5500, john netntlm) --tacacs-plus=&amp;lt;file&amp;gt; : output TACACS PLUS (hashcat -m 16100, john tacacs-plus) --nmea=&amp;lt;file&amp;gt; : output GPS data in NMEA format format: NMEA 0183 $GPGGA, $GPRMC, $GPWPL to convert it to gpx, use GPSBabel: gpsbabel -i nmea -f hcxdumptool.</description></item><item><title>Search-That-Hash</title><link>https://notes.justin-p.me/cheatsheets/tools/search-that-hash/</link><pubDate>Thu, 02 Sep 2021 20:02:34 +0200</pubDate><guid>https://notes.justin-p.me/cheatsheets/tools/search-that-hash/</guid><description>Search-That-Hash Installation pip3 install search-that-hash Usage sth [OPTIONS] Flags -t, --text TEXT Crack a single hash. -f, --file FILENAME The file of hashes, seperated by newlines. -w, --wordlist TEXT The wordlist you want to use for Hashcat. --timeout INTEGER Choose timeout in seconds. -g, --greppable Prints as JSON, use this to grep. --hashcat_binary TEXT Location of hashcat folder (if using windows). -o, --offline Use offline mode. Does not search for hashes in APIs.</description></item><item><title>Name-That-Hash</title><link>https://notes.justin-p.me/cheatsheets/tools/name-that-hash/</link><pubDate>Thu, 02 Sep 2021 19:51:37 +0200</pubDate><guid>https://notes.justin-p.me/cheatsheets/tools/name-that-hash/</guid><description>name-that-hash Installation pip3 install name-that-hash Usage nth [OPTIONS] Flags Options: -t, --text TEXT Check one hash, use single quotes ' as inverted commas &amp;quot; messes up on Linux. -f, --file FILENAME Checks every hash in a newline separated file. -g, --greppable Are you going to grep this output? Prints in JSON format. -b64, --base64 Decodes hashes in Base64 before identification. For files with mixed Base64 &amp;amp; non-encoded it attempts base64 first and then falls back to normal hash identification per hash.</description></item><item><title>hashcat</title><link>https://notes.justin-p.me/cheatsheets/tools/hashcat/</link><pubDate>Tue, 10 Mar 2020 16:43:46 +0100</pubDate><guid>https://notes.justin-p.me/cheatsheets/tools/hashcat/</guid><description>hashcat Installation git clone https://github.com/hashcat/hashcat.git cd hashcat make sudo make install nvidea drivers
apt install nvidia-cuda-toolkit Usage hashcat [options]... hash|hashfile|hccapxfile [dictionary|mask|directory]... Flags Options Short / Long | Type | Description | Example ================================+======+======================================================+======================= -m, --hash-type | Num | Hash-type, see references below | -m 1000 -a, --attack-mode | Num | Attack-mode, see references below | -a 3 -V, --version | | Print version | -h, --help | | Print help | --quiet | | Suppress output | --hex-charset | | Assume charset is given in hex | --hex-salt | | Assume salt is given in hex | --hex-wordlist | | Assume words in wordlist are given in hex | --force | | Ignore warnings | --status | | Enable automatic update of the status screen | --status-json | | Enable JSON format for status ouput | --status-timer | Num | Sets seconds between status screen updates to X | --status-timer=1 --stdin-timeout-abort | Num | Abort if there is no input from stdin for X seconds | --stdin-timeout-abort=300 --machine-readable | | Display the status view in a machine-readable format | --keep-guessing | | Keep guessing the hash after it has been cracked | --self-test-disable | | Disable self-test functionality on startup | --loopback | | Add new plains to induct directory | --markov-hcstat2 | File | Specify hcstat2 file to use | --markov-hcstat2=my.</description></item><item><title>rules</title><link>https://notes.justin-p.me/notes/methodology/general/password-cracking/rules/</link><pubDate>Tue, 10 Mar 2020 16:38:53 +0100</pubDate><guid>https://notes.justin-p.me/notes/methodology/general/password-cracking/rules/</guid><description>rules https://mega.nz/file/XRJBHaqC#gJDkb4GS-vaV1DL3oZ1Y8tt2V-7JOVFjQg0yT1k8Vkg
Also see Wordlist preformance</description></item><item><title>wordlists</title><link>https://notes.justin-p.me/notes/methodology/general/password-cracking/wordlists/</link><pubDate>Tue, 10 Mar 2020 16:38:53 +0100</pubDate><guid>https://notes.justin-p.me/notes/methodology/general/password-cracking/wordlists/</guid><description>wordlists rockyou2021
This combines all the following passwords lists: crackstation.net/crackstation-wordlist-password-cracking-dictionary.htm hack3r.com/forum-topic/wikipedia-wordlist danielmiessler/SecLists@master/Passwords berzerk0/Probable-Wordlists weakpass.com/download password from 3.2 Billion COMB list from early this year. thanks to whoever created it. Also see Wordlist preformance</description></item></channel></rss>