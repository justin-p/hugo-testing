<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on My notes and snippets</title><link>https://confident-austin-c176a7.netlify.com/tools/</link><description>Recent content in Tools on My notes and snippets</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 10 Mar 2020 19:00:54 +0100</lastBuildDate><atom:link href="https://confident-austin-c176a7.netlify.com/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>whatweb</title><link>https://confident-austin-c176a7.netlify.com/tools/whatweb/</link><pubDate>Wed, 11 Mar 2020 16:20:49 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/whatweb/</guid><description>whatweb Installation Usage whatweb [options] &amp;lt;URLs&amp;gt; Flags TARGET SELECTION: &amp;lt;TARGETs&amp;gt; Enter URLs, hostnames, IP addresses, filenames or IP ranges in CIDR, x.x.x-x, or x.x.x.x-x.x.x.x format. --input-file=FILE, -i Read targets from a file. You can pipe hostnames or URLs directly with -i /dev/stdin. TARGET MODIFICATION: --url-prefix Add a prefix to target URLs. --url-suffix Add a suffix to target URLs. --url-pattern Insert the targets into a URL. Requires --input-file, eg. www.</description></item><item><title>Nmap</title><link>https://confident-austin-c176a7.netlify.com/tools/nmap/</link><pubDate>Wed, 11 Mar 2020 16:15:38 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/nmap/</guid><description>Nmap Installation apt install nmap Usage nmap [Scan Type(s)] [Options] {target specification} Flags TARGET SPECIFICATION: Can pass hostnames, IP addresses, networks, etc. Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254 -iL &amp;lt;inputfilename&amp;gt;: Input from list of hosts/networks -iR &amp;lt;num hosts&amp;gt;: Choose random targets --exclude &amp;lt;host1[,host2][,host3],...&amp;gt;: Exclude hosts/networks --excludefile &amp;lt;exclude_file&amp;gt;: Exclude list from file HOST DISCOVERY: -sL: List Scan - simply list targets to scan -sn: Ping Scan - disable port scan -Pn: Treat all hosts as online -- skip host discovery -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports -PE/PP/PM: ICMP echo, timestamp, and netmask request discovery probes -PO[protocol list]: IP Protocol Ping -n/-R: Never do DNS resolution/Always resolve [default: sometimes] --dns-servers &amp;lt;serv1[,serv2],.</description></item><item><title>theHarvester</title><link>https://confident-austin-c176a7.netlify.com/tools/theharvester/</link><pubDate>Wed, 11 Mar 2020 15:28:04 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/theharvester/</guid><description>theHarvester Installation git clone https://github.com/laramies/theHarvester cd theHarvester python3 -m pip install -r requirements/base.txt python3 theHarvester.py -h Usage theHarvester -d [domain] -l [depth] -b [search engine name] Flags -d: Domain to search or company name -b: data source: baidu, bing, bingapi, dogpile, google, googleCSE, googleplus, google-profiles, linkedin, pgp, twitter, vhost, virustotal, threatcrowd, crtsh, netcraft, yahoo, all -s: start in result number X (default: 0) -v: verify host name via dns resolution and search for virtual hosts -f: save the results into an HTML and XML file (both) -n: perform a DNS reverse query on all ranges discovered -c: perform a DNS brute force for the domain name -t: perform a DNS TLD expansion discovery -e: use this DNS server -p: port scan the detected hosts and check for Takeovers (80,443,22,21,8080) -l: limit the number of results to work with(bing goes from 50 to 50 results, google 100 to 100, and pgp doesn't use this option) -h: use SHODAN database to query discovered hosts Examples Scan domain on google theHarvester -d justin-p.</description></item><item><title>amass</title><link>https://confident-austin-c176a7.netlify.com/tools/amass/</link><pubDate>Wed, 11 Mar 2020 15:22:08 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/amass/</guid><description>amass Installation Usage Flags Examples The most basic use of the tool for subdomain enumeration amass enum -d example.com Typical parameters for DNS enumeration amass enum -v -src -ip -brute -min-for-recursive 2 -d example.com Also see Github Documentation</description></item><item><title>PSDNSDumpsterAPI</title><link>https://confident-austin-c176a7.netlify.com/tools/psdnsdumpsterapi/</link><pubDate>Wed, 11 Mar 2020 15:16:39 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/psdnsdumpsterapi/</guid><description>PSDNSDumpsterAPI Installation Install-Module PSDNSDumpsterAPI Usage Invoke-PSDNSDumpsterAPI -Domain 'domain.tld' Flags .PARAMETER Domains One or more domains to get DNSDumpster results for. Examples Return the results from dnsdumpster as a PSObject $DomainInfo=Invoke-PSDnsDumpsterAPI -Domains 'justin-p.me' Also see Github</description></item><item><title>sublist3r</title><link>https://confident-austin-c176a7.netlify.com/tools/sublist3r/</link><pubDate>Wed, 11 Mar 2020 15:15:29 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/sublist3r/</guid><description>Sublist3r Installation Usage Flags Examples Enumerate subdomains of specific domain sublist3r -d example.com Show only subdomains which have ports 80 and 443 open sublist3r -d example.com -p 80,443 Save results in txt file sublist3r -d example.com -o ~/output/file.txt Also see Github</description></item><item><title>h8mail</title><link>https://confident-austin-c176a7.netlify.com/tools/h8mail/</link><pubDate>Wed, 11 Mar 2020 11:56:31 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/h8mail/</guid><description>h8mail h8mail is an email OSINT and breach hunting tool using different breach and reconnaissance services, or local breaches such as Troy Hunt&amp;rsquo;s &amp;ldquo;Collection1&amp;rdquo; and the infamous &amp;ldquo;Breach Compilation&amp;rdquo; torrent.
Installation pip3 install h8mail Usage usage: h8mail [-h] [-t USER_TARGETS [USER_TARGETS ...]] [-u USER_URLS [USER_URLS ...]] [-q USER_QUERY] [--loose] [-c CONFIG_FILE [CONFIG_FILE ...]] [-o OUTPUT_FILE] [-bc BC_PATH] [-sk] [-k CLI_APIKEYS [CLI_APIKEYS ...]] [-lb LOCAL_BREACH_SRC [LOCAL_BREACH_SRC ...]] [-gz LOCAL_GZIP_SRC [LOCAL_GZIP_SRC .</description></item><item><title>nc</title><link>https://confident-austin-c176a7.netlify.com/tools/nc/</link><pubDate>Tue, 10 Mar 2020 16:36:30 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/nc/</guid><description>nc Usage nc OPTIONS HOST PORT Flags -4 Forces nc to use IPv4 addresses only. -6 Forces nc to use IPv6 addresses only. -b Allow broadcast. -C Send CRLF as line-ending. -D Enable debugging on the socket. -d Do not attempt to read from stdin. -h Prints out nc help. -I length Specifies the size of the TCP receive buffer. -i interval Specifies a delay time interval between lines of text sent and received.</description></item><item><title>tmux</title><link>https://confident-austin-c176a7.netlify.com/tools/tmux/</link><pubDate>Tue, 10 Mar 2020 16:36:30 +0100</pubDate><guid>https://confident-austin-c176a7.netlify.com/tools/tmux/</guid><description>tmux Usage start new:
tmux start new with session name:
tmux new -s myname attach:
tmux a # (or at, or attach) attach to named:
tmux a -t myname list sessions:
tmux ls kill session:
tmux kill-session -t myname Kill all the tmux sessions:
tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill In tmux, hit the prefix ctrl+b (my modified prefix is ctrl+a) and then:</description></item></channel></rss>